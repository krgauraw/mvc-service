/**
 * 
 */
package org.sunbird.search;

import akka.dispatch.OnSuccess;
import org.apache.commons.lang.math.RandomUtils;
import org.apache.commons.lang3.StringUtils;
import org.junit.Assert;
import org.junit.BeforeClass;
import org.junit.Test;
import org.sunbird.search.dto.SearchDTO;
import org.sunbird.search.processor.SearchProcessor;
import org.sunbird.search.util.SearchConstants;
import scala.Function1;
import scala.concurrent.ExecutionContext;
import scala.concurrent.Future;

import java.util.*;

/**
 * @author pradyumna
 *
 */
public class SearchProcessorTest extends BaseSearchTest {
	private static SearchProcessor searchprocessor = new SearchProcessor();
	private static Random random = new Random();
	@BeforeClass
	public static void beforeTest() throws Exception {
		 createCompositeSearchIndex();
		 insertTestRecords();
		Thread.sleep(3000);

	}

	private static void insertTestRecords() throws Exception {
		for (int i = 1; i <= 30; i++) {
			Map<String, Object> content = getContentTestRecord(null, i);
			String id = (String) content.get("identifier");
			addToIndex(id, content);
		}
		Map<String, Object> content = getContentTestRecord("do_10000031", 31);
		content.put("name", "31 check name match");
		content.put("description", "हिन्दी description");
		content.remove("ml_contentTextVector");
		content.put("subject", Arrays.asList("English", "Mathematics"));
		addToIndex("do_10000031", content);

		content = getContentTestRecord("do_10000032", 32);
		content.put("name", "check ends with value32");
		content.remove("ml_contentTextVector");
		content.put("subject", Arrays.asList("Mathematics"));
		addToIndex("do_10000032", content);
	}
	private static void insertVectorTestRecord() throws Exception {
		ArrayList<Double> vector= new ArrayList<Double>();
		double arr[] = new double[] { -0.6671018004417419, -0.5134901404380798, 1.6568044424057007, 0.21381662786006927, -0.8284533619880676, -0.4740528166294098, -1.0819512605667114, 0.055975526571273804, -0.32965731620788574, 1.688298225402832, 0.2927059829235077, -0.6999898552894592, 0.7369630336761475, 0.3508361577987671, -0.2712201178073883, 0.3868834674358368, -0.761540412902832, -0.21039795875549316, 0.6932504773139954, -0.5601635575294495, 0.7042908072471619, 0.7351825833320618, -0.9060570597648621, 0.2596309185028076, -0.09013045579195023, 0.7383105158805847, -0.9797739386558533, -0.5340002179145813, 0.18880879878997803, 0.030498981475830078, -0.07691740989685059, -0.33360615372657776, -0.022298552095890045, 0.35208776593208313, 0.017135418951511383, 0.9971437454223633, -0.37522581219673157, -0.2964668273925781, 0.17080825567245483, 0.35741886496543884, 0.6788821220397949, 1.0192315578460693, -0.41202232241630554, 0.7762296795845032, 0.9045150279998779, 0.3784703314304352, 1.1128125190734863, 0.6371192932128906, -0.722135066986084, -1.3392390012741089, 0.4724498689174652, -0.844794511795044, 1.1043717861175537, -1.345943570137024, -0.5081698298454285, -0.39409056305885315, -0.9133819937705994, 0.7018464207649231, -0.6814415454864502, 0.38724371790885925, -0.6510025858879089, 0.992043673992157, -1.681870937347412, 0.5627140402793884, 0.13645975291728973, -0.5080982446670532, 1.593805193901062, -0.31571802496910095, -0.12123658508062363, -0.4175277054309845, -0.5127164721488953, 0.09018798917531967, 0.1793719381093979, 0.9380949139595032, 0.8853082060813904, 0.7938132286071777, 0.280326247215271, -0.17567141354084015, 0.30379942059516907, -1.0249460935592651, -1.1545522212982178, -0.3806368112564087, 0.04372195526957512, 1.1930559873580933, -0.37847211956977844, -0.01768072508275509, -0.08208098262548447, -0.204659104347229, -0.03505699336528778, -1.2173930406570435, 0.20818103849887848, -1.085410237312317, -0.0674649178981781, 0.2337908148765564, -0.32540127635002136, 0.4445362389087677, -0.8071465492248535, -0.2459070235490799, 0.8194400668144226, -1.0101289749145508, -0.0892358049750328, -0.39539217948913574, 0.22013519704341888, -0.6777294278144836, 0.004756450653076172, 0.6549678444862366, 0.9490416646003723, -0.1420711725950241, 0.3546524941921234, -0.3695319592952728, -1.6408028602600098, 0.2279728204011917, 0.4920084476470947, -0.1662531942129135, -0.7301154136657715, -1.4598597288131714, -0.8397380709648132, -0.8399763703346252, -0.6382485032081604, -1.217644214630127, -0.17148490250110626, -0.5287709832191467, 0.7376471161842346, 0.0446242056787014, 0.0758521631360054, -1.0961264371871948, -0.7159318327903748, 0.04143013432621956, 0.20618434250354767, 0.7388319969177246, 0.9931414723396301, 0.14807701110839844, -0.00929869245737791, -1.7705076932907104, -1.1734048128128052, 0.38701948523521423, -0.7156450748443604, 0.7723029255867004, -0.8542971611022949, 0.4095618426799774, 0.05534091591835022, -0.06229446455836296, 0.8967254757881165, -0.4160853624343872, 0.4264261722564697, -0.6159093976020813, -1.3900705575942993, -0.19565904140472412, -0.4697445333003998, -0.013498961925506592, -0.3301102817058563, -0.6206784248352051, -0.6879814267158508, -0.7354812622070312, 0.19076116383075714, -0.531116783618927, 0.4582820236682892, -1.2117716073989868, 0.4030151665210724, -0.29971441626548767, 1.1187080144882202, 0.007592280860990286, 1.036656141281128, 1.6955114603042603, 0.21042096614837646, -0.14268188178539276, 0.49669671058654785, 0.3538595736026764, 0.6292263269424438, 0.026250382885336876, -1.0803853273391724, 0.484404593706131, 0.14876002073287964, -0.25408318638801575, -0.5328371524810791, 0.17894504964351654, 0.15325449407100677, 0.32150161266326904, -0.6127862334251404, -0.5010225176811218, -0.2148955911397934, -0.1409166306257248, -0.12971514463424683, -0.35104358196258545, 0.7281143665313721, -0.448330283164978, -0.24069613218307495, -0.5738444924354553, 0.44805988669395447, 0.0011151209473609924, 0.5557236671447754, 1.5780974626541138, -0.825340986251831, 0.22237814962863922, -0.6976192593574524, 0.6861503720283508, -0.06602618843317032, 0.7656871676445007, 0.23708635568618774, 0.3202148377895355, -0.10095740109682083, -0.055051177740097046, -0.8771393299102783, -1.3123027086257935, -0.6361186504364014, 1.1937874555587769, 0.4415971338748932, -0.41814836859703064, 0.19571661949157715, 0.4746207296848297, -0.11002865433692932, 0.22733135521411896, 0.7563489079475403, -0.6916120648384094, -0.18585269153118134, -0.4639248549938202, 0.8601531386375427, 0.6613319516181946, 0.3775947093963623, -0.04407907649874687, -0.8149951100349426, 1.1203521490097046, -0.9656216502189636, 0.34931519627571106, -0.6666442155838013, -1.17451012134552, 0.25354909896850586, -16.81248664855957, 0.9633471369743347, -1.308447241783142, 0.4983835518360138, -0.00022621949028689414, 0.25332003831863403, 0.09913843125104904, -0.4912905693054199, -0.38486847281455994, 0.7460005283355713, -0.6992265582084656, 0.17735613882541656, 0.6744721531867981, -0.730762779712677, 0.33245179057121277, 0.1648845076560974, 0.7416605949401855, 0.769751787185669, -0.4868694245815277, 0.5369988083839417, 0.6051948666572571, 0.12813521921634674, 0.4050978422164917, -0.18420739471912384, -0.030206358060240746, 0.14721889793872833, 0.35139402747154236, -0.37631067633628845, -0.44842204451560974, -0.35575494170188904, -1.2327263355255127, -0.47954151034355164, -0.10953644663095474, 0.4015301764011383, 1.537010669708252, -0.7742491364479065, -0.07732662558555603, 0.4424175024032593, 0.7612051367759705, -0.021080851554870605, -0.23493491113185883, 0.5136670470237732, -0.39726221561431885, -0.5934458374977112, -0.06728953868150711, -0.49887487292289734, 0.7849475741386414, 0.15132860839366913, 0.6416916251182556, -0.7533857822418213, -0.15274226665496826, -0.5648645758628845, 0.1590781956911087, -0.13194435834884644, 0.3978503942489624, -0.9034201502799988, -1.0818651914596558, 0.2477707713842392, 0.9178244471549988, 0.06028764322400093, -0.127177432179451, -0.2606302797794342, -0.1644435077905655, 1.164933204650879, -0.13941001892089844, -0.44483327865600586, 0.40420302748680115, -1.2321501970291138, 1.1391654014587402, -0.667249858379364, 0.5565738081932068, 0.2133198231458664, -0.46882545948028564, 1.0291836261749268, -0.07742918282747269, -0.13552670180797577, 0.6161919236183167, -1.3028861284255981, 0.41320130228996277, -0.13360098004341125, 0.45632994174957275, 1.0225011110305786, -0.440986305475235, -0.7169221043586731, 0.7710464596748352, -1.7925142049789429, -0.24304403364658356, 0.3197157680988312, -0.07764243334531784, 0.43014979362487793, -0.42908430099487305, -0.03951387479901314, 0.09314864128828049, -0.4940747320652008, 0.5699701905250549, -0.7874996662139893, 0.05284344032406807, -0.2018132358789444, -0.0908254086971283, -1.558125615119934, -0.7246971130371094, -0.40593287348747253, -0.02724759839475155, 0.4383797347545624, -0.7015644907951355, -0.8313069343566895, 0.12324898689985275, -0.4779360294342041, 0.20758216083049774, -0.5734084248542786, -0.6153739094734192, -0.22578930854797363, 0.17019082605838776, 0.0667937695980072, -0.587574303150177, -0.24219270050525665, 0.2231913059949875, 0.5568898916244507, -0.35089072585105896, 0.7727642059326172, -0.799612820148468, -0.5342282652854919, -0.6654134392738342, 1.3110657930374146, 0.0031097258906811476, -0.6083506941795349, -0.10989364236593246, -0.11424512416124344, -0.3677903115749359, 0.7189626097679138, -0.27393460273742676, 0.12090712785720825, 0.47437402606010437, -0.2914946973323822, 0.2656439244747162, -0.6416818499565125, -0.5689446330070496, 0.21750140190124512, -1.593643069267273, -1.2086691856384277, -1.4320141077041626, -0.09669217467308044, 0.982435941696167, 0.052911121398210526, -0.8020555973052979, 0.408402681350708, -0.7089607119560242, -0.3515748083591461, -0.08172526955604553, -0.7736744284629822, 0.08127903193235397, 0.43346667289733887, 0.5484188795089722, 1.7067431211471558, 0.29221904277801514, 1.5988496541976929, -0.9405009150505066, 0.36208513379096985, -0.37615224719047546, -0.796790361404419, -0.1626880019903183, -0.9184115529060364, 0.41863858699798584, 1.0430326461791992, -0.9510963559150696, -0.007545838598161936, -0.5193677544593811, 0.9782974720001221, 0.4122302532196045, 0.5460221171379089, 0.8700814247131348, -1.473032832145691, 0.30797943472862244, -0.3598118722438812, 0.8833238482475281, -0.5622406601905823, -0.34704551100730896, -0.8254149556159973, 0.3229205310344696, 0.33424797654151917, 0.15896768867969513, 0.03880496695637703, 0.8431441187858582, 0.8008410334587097, -1.7056573629379272, 0.2617853879928589, 0.01317767333239317, 0.26468297839164734, -0.5040231347084045, 1.1362866163253784, -0.415863960981369, 0.7043381333351135, -0.6982274055480957, -0.9846210479736328, -0.34033775329589844, -0.1423128843307495, -2.2967355251312256, -0.17229099571704865, -0.16407473385334015, -1.4049301147460938, 0.8627460598945618, 0.17564009130001068, -1.4124583005905151, -1.724230170249939, 2.154876470565796, 0.6217923164367676, 0.5534568428993225, -0.5109220147132874, -1.13795006275177, -0.4900677502155304, 0.14286650717258453, -0.5043209195137024, -0.3874690532684326, 0.9313740730285645, -0.2131529599428177, -0.5444057583808899, 0.2810596823692322, -0.0766058936715126, -0.5958604216575623, -0.17422835528850555, -0.8111982941627502, -0.621865451335907, -0.4386589527130127, 0.3978593647480011, -1.47991144657135, -0.13524971902370453, -0.9214102625846863, -0.06497102230787277, -1.3071765899658203, 0.595072865486145, 1.1670563220977783, 1.2585396766662598, -0.06519029289484024, -0.4364367425441742, 0.1091371551156044, -0.9363348484039307, -0.9179487228393555, 0.7902252078056335, 0.1299598217010498, 0.22206123173236847, 0.6672961711883545, -0.13705572485923767, 1.6631288528442383, -1.0688751935958862, -0.8850293755531311, 0.6601988673210144, 0.37265774607658386, -0.8546721935272217, 0.427753210067749, 0.3787790536880493, 1.1990115642547607, -0.1315573900938034, -1.065388798713684, 0.7510430216789246, -0.11516382545232773, 0.9536882042884827, 0.05977731570601463, -0.5213637948036194, 0.6838162541389465, -0.2287152260541916, -0.1088554859161377, 1.364420771598816, -1.3230060338974, -0.17151904106140137, -1.1348844766616821, 0.5690274834632874, -1.0552806854248047, 0.16171914339065552, -0.2047533392906189, -0.9218528866767883, -1.0190116167068481, 1.18067467212677, -0.3321565091609955, -1.1592200994491577, 1.7412033081054688, 0.4115338623523712, 0.5910460948944092, -0.7791715264320374, -0.9437189102172852, -0.15703482925891876, 1.2458038330078125, -0.9220912456512451, 1.280809760093689, -0.28370401263237, 0.8183448910713196, 1.3000718355178833, -1.013285517692566, -0.3336080312728882, 1.767472267150879, -0.8001120686531067, -0.03951789438724518, -0.2878354787826538, -0.034714121371507645, 0.21316607296466827, 0.7139911651611328, 0.3791535198688507, 0.2746080160140991, 0.006947115063667297, -0.1973409652709961, -0.7771956920623779, -0.7465128898620605, -0.49435651302337646, -0.02667221985757351, -1.4646466970443726, 1.1968201398849487, -0.8835484385490417, 0.6602441668510437, 1.4620609283447266, -0.6501289010047913, -1.0642719268798828, -0.3013450801372528, 0.02349843643605709, -0.028452983126044273, -1.1768836975097656, 0.21605539321899414, 0.1361592561006546, -0.6427014470100403, -0.06571625918149948, 0.6056855916976929, -0.6220178008079529, 0.04720749333500862, 0.5407710075378418, 0.9709422588348389, -1.4512619972229004, 0.6102632880210876, -0.14445310831069946, 0.024930313229560852, -0.39057478308677673, 0.8341763019561768, 0.7215681076049805, 0.008616571314632893, -0.9287096858024597, 0.1787623018026352, -0.5973575711250305, -0.4786093533039093, 0.21738122403621674, -1.03500497341156, 0.2267886996269226, -1.3046647310256958, 0.24964620172977448, 0.6278334259986877, 0.04242539033293724, 0.48818865418434143, 0.634364128112793, 0.7329241633415222, 0.8527271151542664, -0.28385159373283386, 0.5096205472946167, -1.1845325231552124, -1.0262231826782227, -0.2196982353925705, 0.6917412281036377, -1.043981909751892, 0.437704473733902, -0.9822965264320374, 0.08932950347661972, -0.14901576936244965, 0.4814826548099518, 0.6671230792999268, -0.5258926749229431, 0.2313576191663742, 0.3218097388744354, 0.6482886672019958, 0.10417754203081131, -0.15872764587402344, 0.381213903427124, 0.8611884713172913, 0.19279541075229645, 0.228655144572258, -0.22794659435749054, -0.2899673879146576, 0.7336061000823975, 0.6720462441444397, -0.897452175617218, 0.30450698733329773, 0.5880100727081299, 0.5090238451957703, -1.5190383195877075, 0.27596259117126465, -0.10406108945608139, -0.16907663643360138, 0.9797046780586243, -0.7356682419776917, 0.7663337588310242, -0.48220086097717285, 0.7283310890197754, -0.5769136548042297, 1.6013246774673462, -0.8107063174247742, -0.6364601254463196, -0.4916248321533203, 0.45321670174598694, -0.39618006348609924, 0.5857282876968384, 0.38304758071899414, 0.319556325674057, -0.601086437702179, 0.22808563709259033, 1.1530358791351318, 0.4856940805912018, -0.46248769760131836, -0.49029991030693054, 0.004667103290557861, -1.0039958953857422, 1.7476860284805298, 0.3772180378437042, -0.3094137907028198, -0.4944787323474884, 0.1863793283700943, 0.4607866704463959, 0.26229143142700195, 0.7551212906837463, -0.13781318068504333, 0.35111451148986816, -0.9830290675163269, -1.5210803747177124, -0.842799186706543, 0.3250811994075775, -1.0402823686599731, -0.18545986711978912, 0.960704505443573, -0.5754756331443787, -0.1640229970216751, -0.16991297900676727, -0.3038526773452759, -0.206137016415596, -0.8621649146080017, 0.47168514132499695, 0.451212614774704, -0.013643096201121807, -0.5891740918159485, -0.4869929552078247, 0.9732124209403992, 0.05800473690032959, -0.41715431213378906, 0.24585343897342682, 0.01084936410188675, -0.3720649182796478, -0.15672563016414642, 0.6309344172477722, -0.9322189688682556, 0.5983743667602539, -0.17744652926921844, -1.524711012840271, -0.20619845390319824, 1.0385746955871582, -0.036153435707092285, 0.637871503829956, -1.2049716711044312, -1.4265636205673218, 1.1776890754699707, -1.5410584211349487, 0.5284221768379211, 0.09397951513528824, 1.2967935800552368, 0.6023724675178528, 0.34860119223594666, -0.5547927021980286, 0.14248479902744293, 0.012576237320899963, -0.7011591792106628, -0.5189705491065979, 0.2514629662036896, 0.34208688139915466, -0.47780337929725647, -0.13449029624462128, -0.31974783539772034, -0.4780561029911041, 0.5562054514884949, 0.5235561728477478, 0.17302465438842773, 0.5072709321975708, -0.06667939573526382, 0.9102457165718079, 1.1007224321365356, -0.21354202926158905, 0.0993245542049408, 1.2153772115707397, -1.7142210006713867, 0.4889095723628998, -0.9845935702323914, 0.2586210072040558, 0.1060381755232811, 0.874251663684845, 0.04049984738230705, -0.47157883644104004, 0.47766074538230896, -0.16489893198013306, 0.5388228297233582, 0.44875773787498474, -0.799238920211792, -0.9376082420349121, 0.08260034024715424, -0.2391607016324997, -0.16768896579742432, -0.08042676001787186, -0.2175389975309372, -0.5005040764808655, 1.2362786531448364, 0.15610913932323456, 0.25306445360183716, -0.8362622261047363, -0.7555815577507019, -0.25103142857551575, 1.9779247045516968, -0.03466232493519783, -0.670155942440033, -0.8557506203651428, 0.14172416925430298, -0.6297435164451599, 0.7589659690856934, 0.797021210193634, 0.12961961328983307, -0.4951651096343994, -1.6325631141662598, -0.23285011947155, 0.7547018527984619, 0.9645810127258301, -0.3644041121006012, -0.9339917302131653, 0.2615095376968384, -0.40131184458732605, 0.7815356850624084, 0.9734487533569336, 0.38125112652778625, -1.0771872997283936, -0.11931083351373672, 0.8076515197753906, 1.1768828630447388, 0.0350167453289032, 0.578574001789093, -0.5611002445220947, -0.42279210686683655, -0.6645616888999939, -1.480674386024475, 0.6297486424446106, 0.28059759736061096, 0.09454511851072311, 0.6569892168045044, 0.06525745987892151, -0.7567293047904968  };
		for(int i =0 ;i < arr.length ; i++) {
			vector.add(arr[i]);
		}
		Map<String, Object> content = getContentTestRecord("do_10000040", 40);
		content.put("name", "check vector match");
		content.put("identifier","do_100000hello");
		content.put("subject", Arrays.asList("History"));
		content.put("ml_contentTextVector",vector);
		addToIndex("do_100000hello", content);

	}

	private static Map<String, Object> getContentTestRecord(String id, int index) {
		String objectType = "Content";
		 ArrayList<Double> vector= new ArrayList<Double>();
		Map<String, Object> map = new HashMap<String, Object>();
		long suffix = (long) (10000000 + random.nextInt(1000000));
		 double arr[] = new double[] { -0.8978663086891174,0.24750353395938873,0.5895125269889832,-0.6320046186447144,-0.19225503504276276,1.5200005769729614,-0.7930300831794739,1.0100950002670288,0.5973030924797058,0.46319806575775146,-1.9043419361114502,-1.1927913427352905,1.66594398021698,0.27879104018211365,1.1475225687026978,-1.0636166334152222,-0.28768378496170044,-0.09639429301023483,2.1326704025268555,2.17067813873291,2.4420762062072754,1.300720453262329,-1.5137120485305786,0.21190987527370453,-2.4175100326538086,0.32162243127822876,0.9209175109863281,0.18465913832187653,-0.4471054673194885,1.3573658466339111,0.27237260341644287,0.38332587480545044,1.0461481809616089,0.18713513016700745,0.42166441679000854,1.1367579698562622,-0.9787748456001282,0.8208471536636353,-0.924558162689209,0.09320791065692902,-0.8414198756217957,-0.09393970668315887,-0.014658868312835693,0.5042834877967834,0.5574666261672974,-0.16574636101722717,-0.07953201979398727,-0.80523282289505,0.6250880360603333,0.07397031784057617,-0.4380127489566803,-1.4046562910079956,0.8645356893539429,-0.07588540017604828,-0.7985696196556091,0.39650148153305054,1.320041537284851,-0.5238171219825745,-0.10591554641723633,0.3328326642513275,-0.0858859270811081,-0.027941782027482986,-3.045347213745117,0.14108790457248688,-0.22960712015628815,0.33820945024490356,0.401523619890213,-0.9151545763015747,0.3810407221317291,1.3873409032821655,0.17388202250003815,0.2960676848888397,0.5504158139228821,-2.161729097366333,1.0555208921432495,0.7596011757850647,1.1776491403579712,0.3414059281349182,-0.49764934182167053,-1.2748347520828247,-0.31557518243789673,-0.34463024139404297,-0.8337177634239197,0.9647661447525024,-0.9195895195007324,-0.542602002620697,-0.0711713656783104,0.2617957890033722,0.3779052495956421,-0.6813297867774963,0.18077099323272705,-0.01638757437467575,-0.24534942209720612,0.5436575412750244,0.4920711815357208,-0.20764027535915375,-0.5716307759284973,1.2443969249725342,1.474822759628296,-0.8772435784339905,0.3249708414077759,1.6999623775482178,2.0646884441375732,-0.20302076637744904,-0.14592547714710236,0.8355728983879089,0.5338286757469177,-0.6285324692726135,-0.3585004210472107,0.07712610810995102,0.9405598044395447,-0.020202016457915306,-0.24497805535793304,0.6166558861732483,-3.338737964630127,-0.4016968905925751,-0.30423691868782043,-0.644754946231842,-0.27066153287887573,0.7746652960777283,-0.8163261413574219,0.600864052772522,-0.2533480226993561,-0.023036763072013855,0.2983994483947754,0.03021538257598877,-0.37838882207870483,-0.5435929298400879,-0.7959194183349609,-0.16136977076530457,0.8408247232437134,0.5871558785438538,-0.9208550453186035,0.14729085564613342,0.1604391485452652,-1.1090754270553589,-0.22936204075813293,0.23465073108673096,0.8324823379516602,-0.9435377717018127,0.6291794180870056,-0.7029781341552734,0.8057409524917603,-0.5079946517944336,1.1874113082885742,-0.5287407636642456,0.4687979221343994,-0.2652309834957123,1.4998881816864014,0.25139904022216797,-0.5403878688812256,-0.49631601572036743,-1.1115329265594482,0.2378683239221573,0.04291215538978577,0.020775824785232544,1.4773739576339722,-1.2829961776733398,0.2004464715719223,-0.49549251794815063,0.036887068301439285,1.6998182535171509,0.09288936853408813,3.1359024047851562,-0.9365922212600708,-0.7369248270988464,0.2396043837070465,-1.2596372365951538,0.812070369720459,0.2174464464187622,0.3673073649406433,1.7190769910812378,0.42419326305389404,-1.863077998161316,-0.06905793398618698,-0.009117424488067627,-0.3362373113632202,0.9464389085769653,0.5866291522979736,0.7852082252502441,-0.08327430486679077,-0.11665618419647217,0.05939608812332153,-0.6062648892402649,-1.36439847946167,0.7573078870773315,-0.3673640787601471,0.5010082721710205,0.24505600333213806,-0.07094623893499374,-0.7942050099372864,2.344839096069336,1.5543147325515747,0.684683620929718,-0.9027104377746582,0.5401099920272827,0.758811891078949,0.49122852087020874,0.648942768573761,0.9217751622200012,-0.7136492133140564,-0.09302486479282379,0.5721333026885986,0.07254611700773239,-0.26180726289749146,1.1093451976776123,0.9041324257850647,-1.369262456893921,1.6033121347427368,-1.032668948173523,-1.3041476011276245,0.6638773679733276,2.3170552253723145,-0.8058061003684998,0.2759818732738495,0.1968386471271515,-0.7814462780952454,-1.210593819618225,1.1540623903274536,-1.2289334535598755,-0.2221301645040512,-0.12684407830238342,-1.1808984279632568,2.213484764099121,0.9205853939056396,-1.1473039388656616,-1.1214293241500854,-13.978184700012207,0.5146133899688721,0.574910581111908,-0.4451294541358948,0.6414402723312378,0.16196398437023163,0.5280269980430603,-0.9845080971717834,0.1359022557735443,0.1986195147037506,1.819671869277954,-0.9608367681503296,0.39200010895729065,1.3324902057647705,-0.7411342263221741,0.690944492816925,0.33982521295547485,1.7385823726654053,-0.08584615588188171,-0.9588835835456848,-0.04654733091592789,-0.2773955166339874,-1.1819469928741455,-0.3576192557811737,-0.20985396206378937,-0.6713498830795288,1.1967698335647583,-0.9420972466468811,0.6953925490379333,0.4904153347015381,0.29549047350883484,-1.946901559829712,-0.5001698732376099,2.6807219982147217,0.49984973669052124,0.7553715109825134,-1.2732999324798584,-0.04404386878013611,0.8160485625267029,-0.4901546537876129,-1.1075663566589355,-1.2592980861663818,0.04247553274035454,-0.9875730872154236,0.3523869812488556,-1.651640772819519,0.8234656453132629,-0.3741183578968048,-0.8498208522796631,0.9222502112388611,-1.9473061561584473,-0.2997550070285797,-0.1668567806482315,-0.34927213191986084,-0.856572151184082,-0.3370816111564636,0.3733890950679779,0.42312091588974,1.64402437210083,0.6835764646530151,-0.5831720232963562,0.8668659925460815,0.9599641561508179,0.5850957632064819,0.8383274674415588,-0.29424747824668884,-0.5968554019927979,-0.7168431282043457,1.0215009450912476,0.3889720141887665,0.5285812020301819,-0.7150447368621826,-0.10529828816652298,0.4186795949935913,-0.48856252431869507,-0.4638877213001251,0.09990045428276062,-0.6992331147193909,0.2128593772649765,0.2338886857032776,-0.10511412471532822,1.2684358358383179,-1.7552313804626465,1.1119818687438965,1.7925776243209839,-0.8932179808616638,0.13890647888183594,0.5220351815223694,0.6772681474685669,0.010686330497264862,-0.9091678857803345,0.6332839727401733,-0.8816813230514526,0.46864789724349976,0.931011438369751,0.45630234479904175,-0.8592991828918457,-0.6924055218696594,-0.5118225812911987,-1.0044143199920654,-0.13252778351306915,-0.29581212997436523,1.6944489479064941,-0.6498913168907166,2.596011161804199,-1.0227742195129395,1.3215551376342773,0.27594617009162903,-0.37180379033088684,-0.8593317270278931,-1.1010221242904663,-0.2511619031429291,0.1547924280166626,-0.22472843527793884,-0.34677809476852417,-1.1642662286758423,0.06349632143974304,0.4764385223388672,-1.5427796840667725,0.0766824334859848,-0.67010897397995,-0.6641714572906494,-1.1359398365020752,0.6327352523803711,-0.4182009994983673,-1.4642094373703003,-0.004475284367799759,-0.6910312175750732,0.7719188332557678,1.084669828414917,-1.1730645895004272,0.3660963177680969,0.21486803889274597,-1.3242801427841187,0.22948478162288666,-1.1075323820114136,-1.6514739990234375,0.6107211112976074,-0.7834380269050598,-1.1360554695129395,-1.021398663520813,0.8105773329734802,-0.46610113978385925,0.6953778266906738,0.986329197883606,0.8214553594589233,-0.9059455394744873,-0.994243323802948,-0.7531353831291199,0.07996238023042679,-2.08358097076416,1.5363091230392456,0.1093740239739418,1.3057224750518799,0.26710066199302673,-0.3907047212123871,-0.11993980407714844,1.088168978691101,0.4095091223716736,-0.7718554139137268,0.5555020570755005,-0.7601698040962219,-1.772009253501892,-0.30754756927490234,0.4039372503757477,0.30108410120010376,-0.6312099099159241,0.2792868912220001,-0.4022354781627655,0.8850382566452026,-0.8725002408027649,-3.5954806804656982,-0.9839850068092346,-1.683756947517395,-0.1600058525800705,-0.7237516641616821,0.6449337601661682,-0.6897163391113281,-0.3150746524333954,0.9836748242378235,0.7113161683082581,-0.36941832304000854,-0.13182467222213745,0.9200286865234375,-0.36297568678855896,0.8655759692192078,-0.6710010170936584,1.834184169769287,-1.1515544652938843,0.7571486234664917,-0.44953760504722595,0.07775982469320297,0.6230056881904602,-0.012751266360282898,-1.0311274528503418,-0.3731132745742798,-3.467191219329834,0.9666356444358826,-0.21032562851905823,-0.4578149914741516,0.6138712763786316,-0.07919245958328247,0.6261965036392212,0.27288275957107544,0.9718327522277832,-0.6773116588592529,0.1386399120092392,0.5390321612358093,-1.3344300985336304,-0.7224595546722412,0.2518515884876251,-0.9530819654464722,1.889974594116211,-0.2943996489048004,1.6324211359024048,-0.5822640061378479,0.6081765294075012,-0.3693239092826843,0.3466317355632782,-0.6508620381355286,-1.061261534690857,0.666104793548584,-0.2700578570365906,-1.2016253471374512,-2.990706205368042,0.24012355506420135,-1.0206142663955688,1.1106576919555664,0.6331762671470642,-0.5512297749519348,-0.5838741064071655,-0.6593773365020752,0.521489679813385,-0.18746866285800934,-0.16967962682247162,-0.866956889629364,-0.5401415824890137,0.4151339530944824,-0.5178499817848206,0.8235604166984558,0.42909732460975647,0.6048684120178223,0.08723009377717972,-0.8614572882652283,-1.7214751243591309,2.1692700386047363,-1.6484894752502441,-0.859220564365387,1.015950083732605,-0.8844038248062134,-0.2843966484069824,0.07912099361419678,-0.36024147272109985,-0.060657206922769547,-1.0589649677276611,0.3547518253326416,-0.4480270743370056,-0.9964120388031006,0.6262145042419434,1.157448410987854,1.3501774072647095,1.1928763389587402,-1.0199599266052246,0.8770031929016113,-2.2748563289642334,0.4006182551383972,-1.3153676986694336,0.7360790371894836,-0.993381679058075,0.2457103133201599,-1.2038474082946777,-0.48053643107414246,0.6124866604804993,-0.5807456970214844,2.7382359504699707,-0.1195395439863205,1.1705273389816284,-0.17448413372039795,-0.8435259461402893,-1.5376696586608887,-0.8467903137207031,-1.421027660369873,1.9073621034622192,0.9252925515174866,-0.37791529297828674,-0.05298863351345062,-1.3242261409759521,-0.7391877770423889,0.17250004410743713,-0.8918781876564026,1.0194343328475952,-1.274042010307312,-1.2586853504180908,-1.8376039266586304,0.1823902577161789,0.12940697371959686,-0.7599799633026123,-0.5860258936882019,-0.6215028762817383,-0.7670419216156006,0.09043344855308533,1.0508062839508057,-0.17750881612300873,-0.17106661200523376,0.7915206551551819,0.42776229977607727,1.1545525789260864,0.07962081581354141,1.1530858278274536,-1.7231104373931885,-0.13979212939739227,-0.2660958170890808,0.7015973329544067,-0.6276662349700928,1.015747308731079,0.540337085723877,-1.629944920539856,1.105682373046875,1.1892369985580444,-0.6410582661628723,0.6805381774902344,-0.4686795473098755,0.07672247290611267,-0.9145396947860718,1.1358051300048828,-0.21355865895748138,0.9597628116607666,-1.3139432668685913,0.8227160573005676,1.0091407299041748,0.36141839623451233,0.17883451282978058,0.14525823295116425,0.6622503399848938,-0.0763760432600975,0.49234867095947266,0.5554744601249695,-1.3142613172531128,-1.4569156169891357,-0.7102210521697998,-1.042265772819519,1.2374961376190186,1.3618090152740479,0.08697933703660965,-0.1823733150959015,-0.6903920769691467,0.0932399183511734,-0.5570036768913269,-0.0666203647851944,0.09059056639671326,1.3462210893630981,0.9711440801620483,-1.4833968877792358,0.7519276738166809,-0.29387378692626953,0.37646305561065674,-1.472965955734253,1.7566587924957275,0.09955062717199326,-0.9209087491035461,1.3572627305984497,-0.3666571080684662,0.025378771126270294,0.04712286591529846,-2.411590099334717,-0.6845894455909729,-0.310369074344635,0.09921389818191528,-0.17900246381759644,0.24723342061042786,0.34980958700180054,-0.007331917993724346,1.8632726669311523,0.24274346232414246,-1.7772010564804077,1.1504456996917725,-1.0823721885681152,-1.3702841997146606,-0.2885921001434326,-0.5608594417572021,-0.08621645718812943,0.33631497621536255,-0.8926653861999512,0.4211479723453522,0.40305861830711365,-0.5424171090126038,-0.9785756468772888,1.3631837368011475,-0.2684336006641388,0.6734832525253296,-0.6525146961212158,1.0359406471252441,-1.2238051891326904,1.1391971111297607,-0.6207561492919922,-0.25154373049736023,-1.3488173484802246,-0.425564706325531,-0.31707823276519775,-0.558540403842926,0.494040310382843,-0.9476391077041626,-0.41472259163856506,-0.8619323968887329,-0.9479494690895081,-1.0027008056640625,-0.38479411602020264,0.07645853608846664,0.4931116998195648,0.39164555072784424,-0.5682570934295654,0.7577306032180786,-1.1900776624679565,-0.05578190088272095,-0.7129068970680237,-0.666517972946167,-0.7931773662567139,-0.24710234999656677,-3.153414249420166,-0.2511618435382843,1.2358894348144531,0.2145245373249054,0.9536648392677307,0.736270010471344,-0.3203233480453491,-1.4765307903289795,0.18251797556877136,-0.279959112405777,1.5722603797912598,0.20881739258766174,-0.6830788850784302,2.1473004817962646,0.7846813201904297,-1.1676597595214844,-0.6762717962265015,-0.019089464098215103,0.18845245242118835,-0.9923640489578247,0.7805320024490356,0.296072393655777,-0.32025378942489624,-0.28434914350509644,-1.0876200199127197,-0.9132190942764282,-1.1667495965957642,-0.10435852408409119,0.15708814561367035,0.1640184223651886,-1.3526477813720703,0.7192726135253906,-0.12748292088508606,-0.16190871596336365,-1.5133649110794067,-0.11718816310167313,-0.013484087772667408,1.27774178981781,-1.0123870372772217,0.476103276014328,-0.8284627199172974,0.006968727335333824,-1.0362697839736938,-0.7502860426902771,0.39932090044021606,0.06656211614608765,-0.2924077808856964,-1.4532185792922974,-1.2575182914733887,-0.19907277822494507,0.45657849311828613,-0.5404689311981201,1.4583966732025146,0.325676292181015,-1.4619001150131226,-0.3640020191669464,1.8387547731399536,0.3156484365463257,0.23900598287582397,0.4675176739692688,-1.579912781715393,1.623390793800354,-0.8793039321899414,-0.036372601985931396,0.5218636989593506,0.5491719841957092,-1.6976957321166992,0.11953672021627426,1.1665031909942627,0.6769464015960693,0.08539462834596634,0.5800414085388184,0.46055611968040466,0.2558218240737915,0.11652088910341263,-0.462066113948822,-0.8034818172454834,2.696934223175049,0.1788659393787384,-0.16544942557811737,-0.9987923502922058,-0.5284652709960938,1.5048021078109741,-1.008568286895752,-0.3243994116783142,-0.055812448263168335,2.48459529876709,-1.1081607341766357,-1.0742772817611694,-0.2546204924583435,0.4936221241950989,-1.3219300508499146,-0.7546929121017456,0.6626864671707153,-0.2400299459695816,0.2259768545627594,-0.43858468532562256,0.4210059344768524,0.6471108198165894,-0.7114400267601013,-0.47774648666381836,2.0852646827697754,1.2943726778030396,0.0014221612364053726,0.974389910697937,1.0329043865203857,-1.0288678407669067,-1.616182565689087,-1.4524117708206177,-0.42683133482933044,1.6504839658737183,-1.0430703163146973,0.5921847820281982,0.1655389368534088,-1.3774561882019043,-1.8159308433532715,0.7068679928779602,0.15343981981277466,0.13730324804782867,-0.7161146402359009,0.18913739919662476,0.2530224621295929,-0.9294039011001587  };
		for(int i =0 ;i < arr.length ; i++) {
			vector.add(arr[i]);
		}
		map.put("ml_contentTextVector",vector);
		map.put("identifier", "do_" + suffix);
		map.put("objectType", objectType);
		map.put("name", "Content_" + System.currentTimeMillis() + "_name");
		map.put("contentType", "Resource");
		map.put("status", "Draft");
		return map;
	}

	private static Map<String, Object> getTestRecord(String id, int index, String prefix, String objectType) {
		Map<String, Object> map = new HashMap<String, Object>();
		if (StringUtils.isNotBlank(id))
			map.put("identifier", id);
		else {
			long suffix = 10000000 + index;
			map.put("identifier", prefix + "_" + suffix);
		}
		map.put("objectType", objectType);
		return map;
	}

	private static String[] contentTypes = new String[] { "Story", "Worksheet", "Game", "Collection", "Asset" };

	private static String getContentType() {
		return contentTypes[RandomUtils.nextInt(5)];
	}

	private static String[] tags = new String[] { "hindi story", "NCERT", "Pratham", "एकस्टेप", "हिन्दी",
			"हाथी और भालू", "worksheet", "test" };

	private static Set<String> getTags() {
		Set<String> list = new HashSet<String>();
		int count = RandomUtils.nextInt(9);
		for (int i = 0; i < count; i++) {
			list.add(tags[RandomUtils.nextInt(8)]);
		}
		return list;
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Test
	public void testSearchByQuery() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_LIKE);
		property.put(SearchConstants.propertyName, "*");
		property.put(SearchConstants.values, Arrays.asList("हिन्दी"));
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
				boolean found = false;
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					String desc = (String) content.get("description");
					if (null != desc && desc.contains("हिन्दी"))
						found = true;
				}
				Assert.assertTrue(found);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchByQueryForNotEquals() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_LIKE);
		property.put(SearchConstants.propertyName, "*");
		property.put(SearchConstants.values, Arrays.asList("हिन्दी"));
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("31 check name match"));
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_NOT_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() > 0);
				boolean found = false;
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					String desc = (String) content.get("name");
					if (null != desc && !StringUtils.equalsIgnoreCase("31 check name match", desc))
						found = true;
				}
				Assert.assertTrue(found);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchByQueryForNotIn() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_LIKE);
		property.put(SearchConstants.propertyName, "*");
		property.put(SearchConstants.values, Arrays.asList("हिन्दी"));
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("31 check name match"));
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_NOT_IN);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() > 0);
				boolean found = true;
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					String desc = (String) content.get("name");
					if (null != desc && StringUtils.equalsIgnoreCase("31 check name match", desc))
						found = false;
				}
				Assert.assertTrue(found);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchByQueryFields() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_LIKE);
		property.put(SearchConstants.propertyName, "*");
		property.put(SearchConstants.values, Arrays.asList("हिन्दी"));
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		List<String> fields = new ArrayList<String>();
		fields.add("description");
		searchObj.setFields(fields);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() > 0);
				boolean found = false;
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					String desc = (String) content.get("description");
					if (null != desc && desc.contains("हिन्दी"))
						found = true;
				}
				Assert.assertTrue(found);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchArrayFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		List<String> names = new ArrayList<String>();
		names.add("31 check name match");
		names.add("check ends with value32");
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, names);
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() == 2);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchStartsWithFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, "31 check");
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_STARTS_WITH);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() == 1);
				Map<String, Object> content = (Map<String, Object>) results.get(0);
				String identifier = (String) content.get("identifier");
				Assert.assertEquals("do_10000031", identifier);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchEndsWithFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, "Value32");
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_ENDS_WITH);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() == 1);
				Map<String, Object> content = (Map<String, Object>) results.get(0);
				String identifier = (String) content.get("identifier");
				Assert.assertEquals("do_10000032", identifier);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchLTFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, 1000432);
		property.put(SearchConstants.propertyName, "size");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_LESS_THAN);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					Integer identifier = (Integer) content.get("size");
					if (null != identifier)
						Assert.assertTrue(identifier < 1000432);
				}
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchLEGEFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, 1000432);
		property.put(SearchConstants.propertyName, "size");
		property.put(SearchConstants.operation,
				SearchConstants.SEARCH_OPERATION_LESS_THAN_EQUALS);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, 1000432);
		property.put(SearchConstants.propertyName, "size");
		property.put(SearchConstants.operation,
				SearchConstants.SEARCH_OPERATION_GREATER_THAN_EQUALS);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					Integer identifier = (Integer) content.get("size");
					if (null != identifier)
						Assert.assertTrue(identifier == 1000432);
				}
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchGTFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, 564738);
		property.put(SearchConstants.propertyName, "size");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_GREATER_THAN);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					Integer identifier = (Integer) content.get("size");
					if (null != identifier)
						Assert.assertTrue(identifier > 564738);
				}
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchContainsFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, "check");
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_CONTAINS);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					String identifier = (String) content.get("name");
					Assert.assertTrue(identifier.contains("check"));
				}
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchExistsCondition() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, "objectType");
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EXISTS);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					String objectType = (String) content.get("objectType");
					Assert.assertNotNull(objectType);
				}
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSoftConstraints() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		List<String> fields = new ArrayList<String>();
		fields.add("name");
		fields.add("medium");
		fields.add("subject");
		fields.add("contentType");
		searchObj.setFields(fields);
		Map<String, Object> softConstraints = new HashMap<String, Object>();
		softConstraints.put("name",
				Arrays.asList(100, Arrays.asList("31 check name match", "check ends with value32")));
		searchObj.setSoftConstraints(softConstraints);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		searchObj.setLimit(100);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertEquals("31 check name match", results.get(0).get("name"));
				Assert.assertEquals("check ends with value32", results.get(1).get("name"));
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testSearchFacets() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		List<String> exists = new ArrayList<String>();
		exists.add("size");
		exists.add("contentType");
		searchObj.setFacets(exists);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		searchObj.setLimit(100);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Object> list = (List<Object>) response.get("facets");
				Assert.assertNotNull(list);
				Assert.assertTrue(list.size() > 1);
				Map<String, Object> facet = (Map<String, Object>) list.get(0);
				Assert.assertEquals("size", facet.get("name").toString());
				List<Object> values = (List<Object>) facet.get("values");
				Assert.assertEquals(2, values.size());
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings("rawtypes")
	@Test
	public void testSearchCount() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		searchObj.setLimit(100);
		Map<String, Object> response = searchprocessor.processCount(searchObj);
		Integer count = (Integer) response.get("count");
		Assert.assertNotNull(count);

	}

	/**
	 * 
	 */

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Test
	public void testFuzzySearchByQuery() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_LIKE);
		property.put(SearchConstants.propertyName, "*");
		property.put(SearchConstants.values, Arrays.asList("हिन्दी"));
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		searchObj.setFuzzySearch(true);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
				boolean found = false;
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					String desc = (String) content.get("description");
					if (null != desc && desc.contains("हिन्दी"))
						found = true;
				}
				Assert.assertTrue(found);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchByQueryForNotEquals() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_LIKE);
		property.put(SearchConstants.propertyName, "*");
		property.put(SearchConstants.values, Arrays.asList("हिन्दी"));
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("31 check name match"));
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_NOT_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() > 0);
				boolean found = false;
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					String desc = (String) content.get("name");
					if (null != desc && !StringUtils.equalsIgnoreCase("31 check name match", desc))
						found = true;
				}
				Assert.assertTrue(found);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchByQueryForNotIn() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_LIKE);
		property.put(SearchConstants.propertyName, "*");
		property.put(SearchConstants.values, Arrays.asList("हिन्दी"));
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("31 check name match"));
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_NOT_IN);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() > 0);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchByQueryFields() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_LIKE);
		property.put(SearchConstants.propertyName, "*");
		property.put(SearchConstants.values, Arrays.asList("हिन्दी"));
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		List<String> fields = new ArrayList<String>();
		fields.add("description");
		searchObj.setFields(fields);
		searchObj.setFuzzySearch(true);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() > 0);
				boolean found = false;
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					String desc = (String) content.get("description");
					if (null != desc && desc.contains("हिन्दी"))
						found = true;
				}
				Assert.assertTrue(found);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());

	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchArrayFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		List<String> names = new ArrayList<String>();
		names.add("31 check name match");
		names.add("check ends with value32");
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, names);
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 2);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchStartsWithFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, "31 check");
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_STARTS_WITH);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchEndsWithFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, "value32");
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_ENDS_WITH);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchLTFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, 1000432);
		property.put(SearchConstants.propertyName, "size");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_LESS_THAN);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchLEGEFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, 1000432);
		property.put(SearchConstants.propertyName, "size");
		property.put(SearchConstants.operation,
				SearchConstants.SEARCH_OPERATION_LESS_THAN_EQUALS);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, 1000432);
		property.put(SearchConstants.propertyName, "size");
		property.put(SearchConstants.operation,
				SearchConstants.SEARCH_OPERATION_GREATER_THAN_EQUALS);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchGTFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, 564738);
		property.put(SearchConstants.propertyName, "size");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_GREATER_THAN);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchContainsFilter() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, "check");
		property.put(SearchConstants.propertyName, "name");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_CONTAINS);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySearchExistsCondition() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, "objectType");
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EXISTS);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() >= 1);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "unchecked", "rawtypes" })
	@Test
	public void testFuzzySoftConstraints() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		List<String> fields = new ArrayList<String>();
		fields.add("name");
		fields.add("medium");
		fields.add("subject");
		fields.add("contentType");
		searchObj.setFields(fields);
		Map<String, Object> softConstraints = new HashMap<String, Object>();
		softConstraints.put("name", Arrays.asList(100, "31 check name match"));
		searchObj.setSoftConstraints(softConstraints);
		searchObj.setLimit(100);
		searchObj.setFuzzySearch(true);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}

	@SuppressWarnings({ "rawtypes", "unchecked" })
	@Test
	public void testSearchAndFilters() throws Exception {
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_AND);
		property.put(SearchConstants.propertyName, "subject");
		property.put(SearchConstants.values, Arrays.asList("English", "Mathematics"));
		properties.add(property);
		property = new HashMap<String, Object>();
		property.put(SearchConstants.values, Arrays.asList("Content"));
		property.put(SearchConstants.propertyName, "objectType");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		searchObj.setLimit(100);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				Assert.assertTrue(results.size() == 1);
				boolean found = false;
				for (Object obj : results) {
					Map<String, Object> content = (Map<String, Object>) obj;
					List<String> desc = (List<String>) content.get("subject");
					if (null != desc && desc.contains("English") && desc.contains("Mathematics"))
						found = true;
				}
				Assert.assertTrue(found);
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
	}
	@Test
	public void testVectorSearch() throws Exception {
		insertVectorTestRecord();
		SearchDTO searchObj = new SearchDTO();
		List<Map> properties = new ArrayList<Map>();
		Map<String, Object> property = new HashMap<String, Object>();
		property.put(SearchConstants.values, "Draft");
		property.put(SearchConstants.propertyName, "status");
		property.put(SearchConstants.operation, SearchConstants.SEARCH_OPERATION_EQUAL);
		properties.add(property);
		searchObj.setProperties(properties);
		ArrayList<Double> vector= new ArrayList<Double>();
		double arr[] = new double[] {-0.6671018004417419, -0.5134901404380798, 1.6568044424057007, 0.21381662786006927, -0.8284533619880676, -0.4740528166294098, -1.0819512605667114, 0.055975526571273804, -0.32965731620788574, 1.688298225402832, 0.2927059829235077, -0.6999898552894592, 0.7369630336761475, 0.3508361577987671, -0.2712201178073883, 0.3868834674358368, -0.761540412902832, -0.21039795875549316, 0.6932504773139954, -0.5601635575294495, 0.7042908072471619, 0.7351825833320618, -0.9060570597648621, 0.2596309185028076, -0.09013045579195023, 0.7383105158805847, -0.9797739386558533, -0.5340002179145813, 0.18880879878997803, 0.030498981475830078, -0.07691740989685059, -0.33360615372657776, -0.022298552095890045, 0.35208776593208313, 0.017135418951511383, 0.9971437454223633, -0.37522581219673157, -0.2964668273925781, 0.17080825567245483, 0.35741886496543884, 0.6788821220397949, 1.0192315578460693, -0.41202232241630554, 0.7762296795845032, 0.9045150279998779, 0.3784703314304352, 1.1128125190734863, 0.6371192932128906, -0.722135066986084, -1.3392390012741089, 0.4724498689174652, -0.844794511795044, 1.1043717861175537, -1.345943570137024, -0.5081698298454285, -0.39409056305885315, -0.9133819937705994, 0.7018464207649231, -0.6814415454864502, 0.38724371790885925, -0.6510025858879089, 0.992043673992157, -1.681870937347412, 0.5627140402793884, 0.13645975291728973, -0.5080982446670532, 1.593805193901062, -0.31571802496910095, -0.12123658508062363, -0.4175277054309845, -0.5127164721488953, 0.09018798917531967, 0.1793719381093979, 0.9380949139595032, 0.8853082060813904, 0.7938132286071777, 0.280326247215271, -0.17567141354084015, 0.30379942059516907, -1.0249460935592651, -1.1545522212982178, -0.3806368112564087, 0.04372195526957512, 1.1930559873580933, -0.37847211956977844, -0.01768072508275509, -0.08208098262548447, -0.204659104347229, -0.03505699336528778, -1.2173930406570435, 0.20818103849887848, -1.085410237312317, -0.0674649178981781, 0.2337908148765564, -0.32540127635002136, 0.4445362389087677, -0.8071465492248535, -0.2459070235490799, 0.8194400668144226, -1.0101289749145508, -0.0892358049750328, -0.39539217948913574, 0.22013519704341888, -0.6777294278144836, 0.004756450653076172, 0.6549678444862366, 0.9490416646003723, -0.1420711725950241, 0.3546524941921234, -0.3695319592952728, -1.6408028602600098, 0.2279728204011917, 0.4920084476470947, -0.1662531942129135, -0.7301154136657715, -1.4598597288131714, -0.8397380709648132, -0.8399763703346252, -0.6382485032081604, -1.217644214630127, -0.17148490250110626, -0.5287709832191467, 0.7376471161842346, 0.0446242056787014, 0.0758521631360054, -1.0961264371871948, -0.7159318327903748, 0.04143013432621956, 0.20618434250354767, 0.7388319969177246, 0.9931414723396301, 0.14807701110839844, -0.00929869245737791, -1.7705076932907104, -1.1734048128128052, 0.38701948523521423, -0.7156450748443604, 0.7723029255867004, -0.8542971611022949, 0.4095618426799774, 0.05534091591835022, -0.06229446455836296, 0.8967254757881165, -0.4160853624343872, 0.4264261722564697, -0.6159093976020813, -1.3900705575942993, -0.19565904140472412, -0.4697445333003998, -0.013498961925506592, -0.3301102817058563, -0.6206784248352051, -0.6879814267158508, -0.7354812622070312, 0.19076116383075714, -0.531116783618927, 0.4582820236682892, -1.2117716073989868, 0.4030151665210724, -0.29971441626548767, 1.1187080144882202, 0.007592280860990286, 1.036656141281128, 1.6955114603042603, 0.21042096614837646, -0.14268188178539276, 0.49669671058654785, 0.3538595736026764, 0.6292263269424438, 0.026250382885336876, -1.0803853273391724, 0.484404593706131, 0.14876002073287964, -0.25408318638801575, -0.5328371524810791, 0.17894504964351654, 0.15325449407100677, 0.32150161266326904, -0.6127862334251404, -0.5010225176811218, -0.2148955911397934, -0.1409166306257248, -0.12971514463424683, -0.35104358196258545, 0.7281143665313721, -0.448330283164978, -0.24069613218307495, -0.5738444924354553, 0.44805988669395447, 0.0011151209473609924, 0.5557236671447754, 1.5780974626541138, -0.825340986251831, 0.22237814962863922, -0.6976192593574524, 0.6861503720283508, -0.06602618843317032, 0.7656871676445007, 0.23708635568618774, 0.3202148377895355, -0.10095740109682083, -0.055051177740097046, -0.8771393299102783, -1.3123027086257935, -0.6361186504364014, 1.1937874555587769, 0.4415971338748932, -0.41814836859703064, 0.19571661949157715, 0.4746207296848297, -0.11002865433692932, 0.22733135521411896, 0.7563489079475403, -0.6916120648384094, -0.18585269153118134, -0.4639248549938202, 0.8601531386375427, 0.6613319516181946, 0.3775947093963623, -0.04407907649874687, -0.8149951100349426, 1.1203521490097046, -0.9656216502189636, 0.34931519627571106, -0.6666442155838013, -1.17451012134552, 0.25354909896850586, -16.81248664855957, 0.9633471369743347, -1.308447241783142, 0.4983835518360138, -0.00022621949028689414, 0.25332003831863403, 0.09913843125104904, -0.4912905693054199, -0.38486847281455994, 0.7460005283355713, -0.6992265582084656, 0.17735613882541656, 0.6744721531867981, -0.730762779712677, 0.33245179057121277, 0.1648845076560974, 0.7416605949401855, 0.769751787185669, -0.4868694245815277, 0.5369988083839417, 0.6051948666572571, 0.12813521921634674, 0.4050978422164917, -0.18420739471912384, -0.030206358060240746, 0.14721889793872833, 0.35139402747154236, -0.37631067633628845, -0.44842204451560974, -0.35575494170188904, -1.2327263355255127, -0.47954151034355164, -0.10953644663095474, 0.4015301764011383, 1.537010669708252, -0.7742491364479065, -0.07732662558555603, 0.4424175024032593, 0.7612051367759705, -0.021080851554870605, -0.23493491113185883, 0.5136670470237732, -0.39726221561431885, -0.5934458374977112, -0.06728953868150711, -0.49887487292289734, 0.7849475741386414, 0.15132860839366913, 0.6416916251182556, -0.7533857822418213, -0.15274226665496826, -0.5648645758628845, 0.1590781956911087, -0.13194435834884644, 0.3978503942489624, -0.9034201502799988, -1.0818651914596558, 0.2477707713842392, 0.9178244471549988, 0.06028764322400093, -0.127177432179451, -0.2606302797794342, -0.1644435077905655, 1.164933204650879, -0.13941001892089844, -0.44483327865600586, 0.40420302748680115, -1.2321501970291138, 1.1391654014587402, -0.667249858379364, 0.5565738081932068, 0.2133198231458664, -0.46882545948028564, 1.0291836261749268, -0.07742918282747269, -0.13552670180797577, 0.6161919236183167, -1.3028861284255981, 0.41320130228996277, -0.13360098004341125, 0.45632994174957275, 1.0225011110305786, -0.440986305475235, -0.7169221043586731, 0.7710464596748352, -1.7925142049789429, -0.24304403364658356, 0.3197157680988312, -0.07764243334531784, 0.43014979362487793, -0.42908430099487305, -0.03951387479901314, 0.09314864128828049, -0.4940747320652008, 0.5699701905250549, -0.7874996662139893, 0.05284344032406807, -0.2018132358789444, -0.0908254086971283, -1.558125615119934, -0.7246971130371094, -0.40593287348747253, -0.02724759839475155, 0.4383797347545624, -0.7015644907951355, -0.8313069343566895, 0.12324898689985275, -0.4779360294342041, 0.20758216083049774, -0.5734084248542786, -0.6153739094734192, -0.22578930854797363, 0.17019082605838776, 0.0667937695980072, -0.587574303150177, -0.24219270050525665, 0.2231913059949875, 0.5568898916244507, -0.35089072585105896, 0.7727642059326172, -0.799612820148468, -0.5342282652854919, -0.6654134392738342, 1.3110657930374146, 0.0031097258906811476, -0.6083506941795349, -0.10989364236593246, -0.11424512416124344, -0.3677903115749359, 0.7189626097679138, -0.27393460273742676, 0.12090712785720825, 0.47437402606010437, -0.2914946973323822, 0.2656439244747162, -0.6416818499565125, -0.5689446330070496, 0.21750140190124512, -1.593643069267273, -1.2086691856384277, -1.4320141077041626, -0.09669217467308044, 0.982435941696167, 0.052911121398210526, -0.8020555973052979, 0.408402681350708, -0.7089607119560242, -0.3515748083591461, -0.08172526955604553, -0.7736744284629822, 0.08127903193235397, 0.43346667289733887, 0.5484188795089722, 1.7067431211471558, 0.29221904277801514, 1.5988496541976929, -0.9405009150505066, 0.36208513379096985, -0.37615224719047546, -0.796790361404419, -0.1626880019903183, -0.9184115529060364, 0.41863858699798584, 1.0430326461791992, -0.9510963559150696, -0.007545838598161936, -0.5193677544593811, 0.9782974720001221, 0.4122302532196045, 0.5460221171379089, 0.8700814247131348, -1.473032832145691, 0.30797943472862244, -0.3598118722438812, 0.8833238482475281, -0.5622406601905823, -0.34704551100730896, -0.8254149556159973, 0.3229205310344696, 0.33424797654151917, 0.15896768867969513, 0.03880496695637703, 0.8431441187858582, 0.8008410334587097, -1.7056573629379272, 0.2617853879928589, 0.01317767333239317, 0.26468297839164734, -0.5040231347084045, 1.1362866163253784, -0.415863960981369, 0.7043381333351135, -0.6982274055480957, -0.9846210479736328, -0.34033775329589844, -0.1423128843307495, -2.2967355251312256, -0.17229099571704865, -0.16407473385334015, -1.4049301147460938, 0.8627460598945618, 0.17564009130001068, -1.4124583005905151, -1.724230170249939, 2.154876470565796, 0.6217923164367676, 0.5534568428993225, -0.5109220147132874, -1.13795006275177, -0.4900677502155304, 0.14286650717258453, -0.5043209195137024, -0.3874690532684326, 0.9313740730285645, -0.2131529599428177, -0.5444057583808899, 0.2810596823692322, -0.0766058936715126, -0.5958604216575623, -0.17422835528850555, -0.8111982941627502, -0.621865451335907, -0.4386589527130127, 0.3978593647480011, -1.47991144657135, -0.13524971902370453, -0.9214102625846863, -0.06497102230787277, -1.3071765899658203, 0.595072865486145, 1.1670563220977783, 1.2585396766662598, -0.06519029289484024, -0.4364367425441742, 0.1091371551156044, -0.9363348484039307, -0.9179487228393555, 0.7902252078056335, 0.1299598217010498, 0.22206123173236847, 0.6672961711883545, -0.13705572485923767, 1.6631288528442383, -1.0688751935958862, -0.8850293755531311, 0.6601988673210144, 0.37265774607658386, -0.8546721935272217, 0.427753210067749, 0.3787790536880493, 1.1990115642547607, -0.1315573900938034, -1.065388798713684, 0.7510430216789246, -0.11516382545232773, 0.9536882042884827, 0.05977731570601463, -0.5213637948036194, 0.6838162541389465, -0.2287152260541916, -0.1088554859161377, 1.364420771598816, -1.3230060338974, -0.17151904106140137, -1.1348844766616821, 0.5690274834632874, -1.0552806854248047, 0.16171914339065552, -0.2047533392906189, -0.9218528866767883, -1.0190116167068481, 1.18067467212677, -0.3321565091609955, -1.1592200994491577, 1.7412033081054688, 0.4115338623523712, 0.5910460948944092, -0.7791715264320374, -0.9437189102172852, -0.15703482925891876, 1.2458038330078125, -0.9220912456512451, 1.280809760093689, -0.28370401263237, 0.8183448910713196, 1.3000718355178833, -1.013285517692566, -0.3336080312728882, 1.767472267150879, -0.8001120686531067, -0.03951789438724518, -0.2878354787826538, -0.034714121371507645, 0.21316607296466827, 0.7139911651611328, 0.3791535198688507, 0.2746080160140991, 0.006947115063667297, -0.1973409652709961, -0.7771956920623779, -0.7465128898620605, -0.49435651302337646, -0.02667221985757351, -1.4646466970443726, 1.1968201398849487, -0.8835484385490417, 0.6602441668510437, 1.4620609283447266, -0.6501289010047913, -1.0642719268798828, -0.3013450801372528, 0.02349843643605709, -0.028452983126044273, -1.1768836975097656, 0.21605539321899414, 0.1361592561006546, -0.6427014470100403, -0.06571625918149948, 0.6056855916976929, -0.6220178008079529, 0.04720749333500862, 0.5407710075378418, 0.9709422588348389, -1.4512619972229004, 0.6102632880210876, -0.14445310831069946, 0.024930313229560852, -0.39057478308677673, 0.8341763019561768, 0.7215681076049805, 0.008616571314632893, -0.9287096858024597, 0.1787623018026352, -0.5973575711250305, -0.4786093533039093, 0.21738122403621674, -1.03500497341156, 0.2267886996269226, -1.3046647310256958, 0.24964620172977448, 0.6278334259986877, 0.04242539033293724, 0.48818865418434143, 0.634364128112793, 0.7329241633415222, 0.8527271151542664, -0.28385159373283386, 0.5096205472946167, -1.1845325231552124, -1.0262231826782227, -0.2196982353925705, 0.6917412281036377, -1.043981909751892, 0.437704473733902, -0.9822965264320374, 0.08932950347661972, -0.14901576936244965, 0.4814826548099518, 0.6671230792999268, -0.5258926749229431, 0.2313576191663742, 0.3218097388744354, 0.6482886672019958, 0.10417754203081131, -0.15872764587402344, 0.381213903427124, 0.8611884713172913, 0.19279541075229645, 0.228655144572258, -0.22794659435749054, -0.2899673879146576, 0.7336061000823975, 0.6720462441444397, -0.897452175617218, 0.30450698733329773, 0.5880100727081299, 0.5090238451957703, -1.5190383195877075, 0.27596259117126465, -0.10406108945608139, -0.16907663643360138, 0.9797046780586243, -0.7356682419776917, 0.7663337588310242, -0.48220086097717285, 0.7283310890197754, -0.5769136548042297, 1.6013246774673462, -0.8107063174247742, -0.6364601254463196, -0.4916248321533203, 0.45321670174598694, -0.39618006348609924, 0.5857282876968384, 0.38304758071899414, 0.319556325674057, -0.601086437702179, 0.22808563709259033, 1.1530358791351318, 0.4856940805912018, -0.46248769760131836, -0.49029991030693054, 0.004667103290557861, -1.0039958953857422, 1.7476860284805298, 0.3772180378437042, -0.3094137907028198, -0.4944787323474884, 0.1863793283700943, 0.4607866704463959, 0.26229143142700195, 0.7551212906837463, -0.13781318068504333, 0.35111451148986816, -0.9830290675163269, -1.5210803747177124, -0.842799186706543, 0.3250811994075775, -1.0402823686599731, -0.18545986711978912, 0.960704505443573, -0.5754756331443787, -0.1640229970216751, -0.16991297900676727, -0.3038526773452759, -0.206137016415596, -0.8621649146080017, 0.47168514132499695, 0.451212614774704, -0.013643096201121807, -0.5891740918159485, -0.4869929552078247, 0.9732124209403992, 0.05800473690032959, -0.41715431213378906, 0.24585343897342682, 0.01084936410188675, -0.3720649182796478, -0.15672563016414642, 0.6309344172477722, -0.9322189688682556, 0.5983743667602539, -0.17744652926921844, -1.524711012840271, -0.20619845390319824, 1.0385746955871582, -0.036153435707092285, 0.637871503829956, -1.2049716711044312, -1.4265636205673218, 1.1776890754699707, -1.5410584211349487, 0.5284221768379211, 0.09397951513528824, 1.2967935800552368, 0.6023724675178528, 0.34860119223594666, -0.5547927021980286, 0.14248479902744293, 0.012576237320899963, -0.7011591792106628, -0.5189705491065979, 0.2514629662036896, 0.34208688139915466, -0.47780337929725647, -0.13449029624462128, -0.31974783539772034, -0.4780561029911041, 0.5562054514884949, 0.5235561728477478, 0.17302465438842773, 0.5072709321975708, -0.06667939573526382, 0.9102457165718079, 1.1007224321365356, -0.21354202926158905, 0.0993245542049408, 1.2153772115707397, -1.7142210006713867, 0.4889095723628998, -0.9845935702323914, 0.2586210072040558, 0.1060381755232811, 0.874251663684845, 0.04049984738230705, -0.47157883644104004, 0.47766074538230896, -0.16489893198013306, 0.5388228297233582, 0.44875773787498474, -0.799238920211792, -0.9376082420349121, 0.08260034024715424, -0.2391607016324997, -0.16768896579742432, -0.08042676001787186, -0.2175389975309372, -0.5005040764808655, 1.2362786531448364, 0.15610913932323456, 0.25306445360183716, -0.8362622261047363, -0.7555815577507019, -0.25103142857551575, 1.9779247045516968, -0.03466232493519783, -0.670155942440033, -0.8557506203651428, 0.14172416925430298, -0.6297435164451599, 0.7589659690856934, 0.797021210193634, 0.12961961328983307, -0.4951651096343994, -1.6325631141662598, -0.23285011947155, 0.7547018527984619, 0.9645810127258301, -0.3644041121006012, -0.9339917302131653, 0.2615095376968384, -0.40131184458732605, 0.7815356850624084, 0.9734487533569336, 0.38125112652778625, -1.0771872997283936, -0.11931083351373672, 0.8076515197753906, 1.1768828630447388, 0.0350167453289032, 0.578574001789093, -0.5611002445220947, -0.42279210686683655, -0.6645616888999939, -1.480674386024475, 0.6297486424446106, 0.28059759736061096, 0.09454511851072311, 0.6569892168045044, 0.06525745987892151, -0.7567293047904968 };
		for(int i =0 ;i < arr.length ; i++) {
			vector.add(arr[i]);
		}
		searchObj.setQueryvector(vector);
		searchObj.setOperation(SearchConstants.SEARCH_OPERATION_AND);
		searchObj.setLimit(100);
		Future<Map<String, Object>> res = searchprocessor.processSearch(searchObj, true);
		res.onSuccess(new OnSuccess<Map<String, Object>>() {
			public void onSuccess(Map<String, Object> response) {
				System.out.println("Passed");
				List<Map> results = (List<Map>) response.get("results");
				Assert.assertNotNull(results);
				System.out.println(results.get(0).get("name"));
				Assert.assertEquals("check vector match", results.get(0).get("name"));
			}
		}, ExecutionContext.Implicits$.MODULE$.global());
		res.onFailure(new OnSuccess<Throwable>() {
			@Override
			public void onSuccess(Throwable result) throws Throwable, Throwable {
					System.out.println("Failed");
			}

		}, ExecutionContext.Implicits$.MODULE$.global());
	}

}
